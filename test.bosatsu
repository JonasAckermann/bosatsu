package Foo/Bar

export [
   x, z, Either(), Record()
]

x = 1

def y(x):
  x.add(1)

z = if eq_Int(x, 1):
  y
else:
  \q -> q.add(x)

struct Record(a, b)

enum Either:
  Left(left)
  Right(right)

def is_empty(list):
  match list:
    EmptyList:
      True
    NonEmptyList(_, _):
      False

struct Monoid(empty: a, combine: a -> a -> a)

intMonoid = Monoid(0, \x, y -> x.add(y))

# This gives us enough to implement useful List functions (and is total)
# but not expressible directly
external def fold(l: List[a], init: b, fn: (b -> a -> b)) -> b

external struct Action[a]

external def print(msg: String) -> Action[Unit]
external def flatMap(act: Action[a], fn: a -> Action[b]) -> Action[b]
external def mapAction(act: Action[a], fn: (a -> b)) -> Action[b]
external def toAction(a: a) -> Action[a]
external def runAction(a: Action[a]) -> a

def reduce(list, fn):
  match list:
    EmptyList:
        None
    NonEmptyList(head, tail):
        Some(tail.fold(head, fn))

def reverse(list):
  fold(list, EmptyList, \tail, item -> NonEmptyList(item, tail))

def map(list, fn):
  fold(list, EmptyList, \tail, item -> NonEmptyList(fn(item), tail)).reverse

def filter(list, fn):
  rev_filter = fold(list, EmptyList, \tail, item -> if fn(item):
    NonEmptyList(item, tail)
  else:
    tail)

  rev_filter.reverse

def sum(items):
  fold(items, 0, add)

struct Unit

e = Some(1)
sz = match e:
   Some(x):
     z(x)
   None:
     0

def plus(a, b):
  add(a, b)

three = 1.plus(2)

external def hc(i: Int) -> Int

foo = NonEmptyList(1, NonEmptyList(2, EmptyList))

act = print("42").flatMap(\u -> toAction(43))
resA = runAction(act)

main = match foo:
  EmptyList:
    0
  NonEmptyList(x, tail):
    hc(resA).add(foo.map(\x -> 10.times(x)).sum)

struct File(file: String, executable: Bool, size: Int, children: List[File])

last = File("foo", False, 100, EmptyList)
