package Bosatsu/Predef

export [
  Assertion(),
  Bool(),
  Comparison(),
  Int,
  Option(),
  List,
  String,
  Test(),
  TestSuite(),
  Tuple2(),
  Unit(),
  add,
  cmp_Int,
  concat,
  consList,
  div,
  emptyList,
  eq_Int,
  foldLeft,
  gcd_Int,
  int_loop,
  mod_Int,
  range,
  range_fold,
  reverse,
  reverse_concat,
  sub,
  times,
  trace,
]

struct Unit
struct Tuple2(first, second)

enum Bool:
  False
  True

external struct List[a]

external def emptyList -> List[a]
external def consList(head: a, tail: List[a]) -> List[a]

external def foldLeft(lst: List[a], item: b, fn: b -> a -> b) -> b

def reverse_concat(front: List[a], back: List[a]) -> List[a]:
  foldLeft(front, back, \tail, h -> consList(h, tail))

def reverse(as: List[a]) -> List[a]:
  reverse_concat(as, emptyList)

def concat(front: List[a], back: List[a]) -> List[a]:
  match back:
    []: front
    _: reverse_concat(reverse(front), back)

enum Comparison:
  LT
  EQ
  GT

enum Option:
  None
  Some(v)

external struct Int

external def add(a: Int, b: Int) -> Int
external def sub(a: Int, b: Int) -> Int
external def times(a: Int, b: Int) -> Int
external def div(a: Int, b: Int) -> Option[Int]
external def eq_Int(a: Int, b: Int) -> Bool
external def gcd_Int(a: Int, b: Int) -> Int
external def cmp_Int(a: Int, b: Int) -> Comparison
external def mod_Int(a: Int, mod: Int) -> Int

external def range(exclusiveUpper: Int) -> List[Int]

# this loops until the returned Int is <= 0 or the returned Int is >= intValue
external def int_loop(intValue: Int, state: a, fn: Int -> a -> Tuple2[Int, Tuple2[a, Unit]]) -> a

def range_fold(inclusiveLower: Int, exclusiveUpper: Int, init: a, fn: a -> Int -> a) -> a:
  diff = exclusiveUpper.sub(inclusiveLower)
  int_loop(diff, init, \diff0, a ->
    idx = exclusiveUpper.sub(diff0)
    a1 = fn(a, idx)
    Tuple2(diff0.sub(1), Tuple2(a1, Unit)))

external struct String

struct Assertion(value: Bool, message: String)
struct Test(name: String, assertions: List[Assertion])
struct TestSuite(name: String, tests: List[Test])

external def trace(prefix: String, item: a) -> a
